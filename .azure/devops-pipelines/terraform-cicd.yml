# This Azure DevOps Pipeline tests and validates Terraform config (ML resource config and more)
# defined under databricks-config, upon creating a PR against the default branch.
# The pipeline then deploys Terraform resources (ML resource config and more)
# defined under databricks-config, when a PR has been successfully merged into the default branch

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - databricks-config/**

variables:
  working-directory: ./databricks-config

stages:

# Run Terraform CI stage on pull requests to main
- stage: TerraformCI
  displayName: 'Terraform Tests for mlops_stack_ado'
  condition: |
    and(
      eq(variables['Build.Reason'], 'PullRequest'),
      eq(variables['System.PullRequest.TargetBranch'], 'refs/heads/main')
    )

  jobs:
  - job: StagingTerraformCI
    displayName: 'Continuous integration tests for staging Terraform scripts'

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      environment: staging

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

    - script: |
        set -ex
        STAGING_AZURE_SP_TENANT_ID=$(STAGING-AZURE-SP-TENANT-ID)
        STAGING_AZURE_SP_APPLICATION_ID=$(STAGING-AZURE-SP-APPLICATION-ID)
        STAGING_AZURE_SP_CLIENT_SECRET=$(STAGING-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_TOKEN=$(.azure/devops-pipelines/scripts/generate-aad-token.sh "$STAGING_AZURE_SP_TENANT_ID" "$STAGING_AZURE_SP_APPLICATION_ID" "$STAGING_AZURE_SP_CLIENT_SECRET")
        echo "##vso[task.setvariable variable=DATABRICKS_TOKEN;issecret=true]${DATABRICKS_TOKEN}"
      displayName: 'Configure AAD auth'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew tap hashicorp/tap
        brew install hashicorp/tap/terraform
      displayName: 'Install Terraform'

    - script: |
       terraform fmt -check -recursive -diff
      displayName: 'Terraform fmt'
      continueOnError: true

    - script: |
        echo "working-directory: $(working-directory)/$(environment)"
        terraform init
      displayName: 'Terraform Init'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(STAGING-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(STAGING-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(STAGING-AZURE-SP-CLIENT-SECRET)

    - script: |
        terraform validate -no-color
      displayName: 'Terraform Validate'
      workingDirectory: $(working-directory)/$(environment)

    - script: |
        terraform plan -no-color \
        -var="git_repo_url=$(Build.Repository.Uri)"
      displayName: 'Terraform Plan'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(STAGING-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(STAGING-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(STAGING-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)

  - job: ProdTerraformCI
    displayName: 'Continuous integration tests for prod Terraform scripts'
    dependsOn: []   # Removes the implicit dependency on previous job and force ProdTerraformCI job to run in parallel

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      environment: prod

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

    - script: |
        set -e
        PROD_AZURE_SP_TENANT_ID=$(PROD-AZURE-SP-TENANT-ID)
        PROD_AZURE_SP_APPLICATION_ID=$(PROD-AZURE-SP-APPLICATION-ID)
        PROD_AZURE_SP_CLIENT_SECRET=$(PROD-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_TOKEN=$(.azure/devops-pipelines/scripts/generate-aad-token.sh "$PROD_AZURE_SP_TENANT_ID" "$PROD_AZURE_SP_APPLICATION_ID" "$PROD_AZURE_SP_CLIENT_SECRET")
        echo "##vso[task.setvariable variable=DATABRICKS_TOKEN;issecret=true]${DATABRICKS_TOKEN}"
      displayName: 'Configure AAD auth'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew tap hashicorp/tap
        brew install hashicorp/tap/terraform
      displayName: 'Install Terraform'

    - script: |
       terraform fmt -check -recursive -diff
      continueOnError: true
      displayName: 'Terraform fmt'

    - script: |
        terraform init
      displayName: 'Terraform Init'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(PROD-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(PROD-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(PROD-AZURE-SP-CLIENT-SECRET)

    - script: |
        terraform validate -no-color
      displayName: 'Terraform Validate'
      workingDirectory: $(working-directory)/$(environment)

    - script: |
        terraform plan -no-color \
        -var="git_repo_url=$(Build.Repository.Uri)"
      displayName: 'Terraform Plan'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(PROD-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(PROD-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(PROD-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)

# Run Terraform CD stage after successfully merging to main
- stage: TerraformCD
  displayName: 'Terraform Deployment for mlops_stack_ado'
  condition:
    not(eq(variables['Build.Reason'], 'PullRequest'))

  jobs:
  - job: StagingTerraformCD
    displayName: 'Continuous deployment for staging Terraform resources'

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      environment: staging

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

    - script: |
        set -e
        STAGING_AZURE_SP_TENANT_ID=$(STAGING-AZURE-SP-TENANT-ID)
        STAGING_AZURE_SP_APPLICATION_ID=$(STAGING-AZURE-SP-APPLICATION-ID)
        STAGING_AZURE_SP_CLIENT_SECRET=$(STAGING-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_TOKEN=$(.azure/devops-pipelines/scripts/generate-aad-token.sh "$STAGING_AZURE_SP_TENANT_ID" "$STAGING_AZURE_SP_APPLICATION_ID" "$STAGING_AZURE_SP_CLIENT_SECRET")
        echo "##vso[task.setvariable variable=DATABRICKS_TOKEN;issecret=true]${DATABRICKS_TOKEN}"
      displayName: 'Configure AAD auth'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew tap hashicorp/tap
        brew install hashicorp/tap/terraform
      displayName: 'Install Terraform'

    - script: |
       terraform fmt -check
      displayName: 'Terraform fmt'
      continueOnError: true

    - script: |
        terraform init
      displayName: 'Terraform Init'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(STAGING-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(STAGING-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(STAGING-AZURE-SP-CLIENT-SECRET)

    - script: |
        terraform validate
      displayName: 'Terraform Validate'
      workingDirectory: $(working-directory)/$(environment)

    - script: |
        terraform plan -no-color \
        -var="git_repo_url=$(Build.Repository.Uri)"
      displayName: 'Terraform Plan'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(STAGING-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(STAGING-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(STAGING-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)

    - script: |
        terraform apply -auto-approve \
        -var="git_repo_url=$(Build.Repository.Uri)"
      displayName: 'Terraform Apply'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(STAGING-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(STAGING-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(STAGING-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_HOST: $(STAGING_DATABRICKS_HOST)

    - script: |
        TERRAFORM_OUTPUT=$(terraform -chdir=staging output -json)
        mkdir -p output
        echo $TERRAFORM_OUTPUT | jq '.' > output/$(environment).json
      displayName: 'Terraform Output'
      workingDirectory: $(working-directory)
      env:
        ARM_TENANT_ID: $(STAGING-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(STAGING-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(STAGING-AZURE-SP-CLIENT-SECRET)

    - script: |
        ORIGINAL_BRANCH='$(Build.SourceBranch)'
        ROOT=refs/heads/
        BRANCH="${ORIGINAL_BRANCH/$ROOT/''}"
        git checkout -b $BRANCH
        git pull origin $BRANCH
        git config --global user.name "Terraform Output Azure DevOps Pipeline"
        git config --global user.email "<>"
        output=$(git status --porcelain)
        if [ -n "$output" ]
        then
          git add -A
          git commit -m "Commit staging output"
          git push --set-upstream origin $BRANCH
          git fetch origin release
          git checkout release
          git cherry-pick main
          git push
        fi
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: 'Commit Terraform Output to File'

  - job: ProdTerraformCD
    displayName: 'Continuous deployment for staging Terraform resources'

    pool:
      vmImage: 'ubuntu-latest'

    variables:
      environment: prod

    steps:
    - script: env | sort
      displayName: 'Environment / Context'

    - checkout: self
      displayName: 'Checkout & Build.Reason: $(Build.Reason) & Build.SourceBranchName: $(Build.SourceBranchName)'
      persistCredentials: true
      clean: true

    - script: |
        set -e
        PROD_AZURE_SP_TENANT_ID=$(PROD-AZURE-SP-TENANT-ID)
        PROD_AZURE_SP_APPLICATION_ID=$(PROD-AZURE-SP-APPLICATION-ID)
        PROD_AZURE_SP_CLIENT_SECRET=$(PROD-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_TOKEN=$(.azure/devops-pipelines/scripts/generate-aad-token.sh "$PROD_AZURE_SP_TENANT_ID" "$PROD_AZURE_SP_APPLICATION_ID" "$PROD_AZURE_SP_CLIENT_SECRET")
        echo "##vso[task.setvariable variable=DATABRICKS_TOKEN;issecret=true]${DATABRICKS_TOKEN}"
      displayName: 'Configure AAD auth'

    - script: |
        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
        brew tap hashicorp/tap
        brew install hashicorp/tap/terraform
      displayName: 'Install Terraform'

    - script: |
       terraform fmt -check
      displayName: 'Terraform fmt'
      continueOnError: true

    - script: |
        terraform init
      displayName: 'Terraform Init'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(PROD-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(PROD-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(PROD-AZURE-SP-CLIENT-SECRET)

    - script: |
        terraform validate
      displayName: 'Terraform Validate'
      workingDirectory: $(working-directory)/$(environment)

    - script: |
        terraform plan -no-color \
        -var="git_repo_url=$(Build.Repository.Uri)"
      displayName: 'Terraform Plan'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(PROD-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(PROD-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(PROD-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)

    - script: |
        terraform apply -auto-approve \
        -var="git_repo_url=$(Build.Repository.Uri)"
      displayName: 'Terraform Apply'
      workingDirectory: $(working-directory)/$(environment)
      env:
        ARM_TENANT_ID: $(PROD-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(PROD-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(PROD-AZURE-SP-CLIENT-SECRET)
        DATABRICKS_HOST: $(PROD_DATABRICKS_HOST)

    - script: |
        TERRAFORM_OUTPUT=$(terraform -chdir=prod output -json)
        mkdir -p output
        echo $TERRAFORM_OUTPUT | jq '.' > output/$(environment).json
      displayName: 'Terraform Output'
      workingDirectory: $(working-directory)
      env:
        ARM_TENANT_ID: $(PROD-AZURE-SP-TENANT-ID)
        ARM_CLIENT_ID: $(PROD-AZURE-SP-APPLICATION-ID)
        ARM_CLIENT_SECRET: $(PROD-AZURE-SP-CLIENT-SECRET)

    - script: |
        ORIGINAL_BRANCH='$(Build.SourceBranch)'
        ROOT=refs/heads/
        BRANCH="${ORIGINAL_BRANCH/$ROOT/''}"
        git checkout -b $BRANCH
        git config --global user.name "Terraform Output Azure DevOps Pipeline"
        git config --global user.email "<>"
        output=$(git status --porcelain)
        if [ -n "$output" ]
        then
          git add -A
          git commit -m "Commit prod output"
          git push --set-upstream origin $BRANCH
          git fetch origin release
          git checkout release
          git cherry-pick main
          git push
        fi
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: 'Commit Terraform Output to File'
